periodics:
  - name: periodic-kubernetes-unit-test-ppc64le-1-34
    labels:
      preset-ssh-bot: "true"
    decorate: true
    decoration_config:
      gcs_configuration:
        bucket: ppc64le-kubernetes
        path_strategy: explicit
      gcs_credentials_secret: gcs-credentials
    cron: "0 3 * * *"
    extra_refs:
      - base_ref: main
        org: kubernetes-sigs
        repo: provider-ibmcloud-test-infra
        workdir: true
    spec:
      containers:
        - image: gcr.io/k8s-staging-test-infra/kubekins-e2e:v20241128-8df65c072f-1.34
          resources:
            requests:
              cpu: "1500m"
            limits:
              cpu: "1500m"
          command:
            - /bin/bash
          args:
            - -c
            - |
              set -o errexit
              set -o nounset
              set -o pipefail
              set -o xtrace

              export PATH=$GOPATH/bin:$PATH
              export GO111MODULE=on


              make install-deployer-tf

              TF_LATEST="v1.9.8"

              curl -fsSL https://releases.hashicorp.com/terraform/${TF_LATEST:1}/terraform_${TF_LATEST:1}_linux_amd64.zip -o ./terraform.zip
              unzip -o ./terraform.zip  >/dev/null 2>&1
              rm -f ./terraform.zip
              TF="$PWD/terraform"
              export PATH=$PWD:$PATH

              apt-get update && apt-get install -y ansible

              TIMESTAMP=$(date +%s)

              set +o errexit
              kubetest2 tf --powervs-image-name CentOS-Stream-9 \
                --powervs-region syd --powervs-zone syd05 \
                --powervs-service-id c3f5354a-517e-4927-8523-890c4bf3d6c5 \
                --powervs-ssh-key powercloud-bot-key \
                --ssh-private-key /etc/secret-volume/ssh-privatekey \
                --cluster-name config4-$TIMESTAMP \
                --up --set-kubeconfig=false --auto-approve \
                --retry-on-tf-failure 3 \
                --break-kubetest-on-upfail true --powervs-memory 32 \
                --extra-vars=k8s_branch:release-1.34 \
                --playbook k8s-ut-remote.yml
              EXTERNAL_IP=`grep -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' $(pwd)/config4-$TIMESTAMP/hosts`
              kubetest2 tf --test=exec -- ssh -i /etc/secret-volume/ssh-privatekey root@$EXTERNAL_IP \
                "/make-test.sh"; \
                rc=$?; scp -r -i /etc/secret-volume/ssh-privatekey root@$EXTERNAL_IP:/home/nonroot/artifacts $ARTIFACTS
              kubetest2 tf --powervs-region syd --powervs-zone syd05 \
                --powervs-service-id c3f5354a-517e-4927-8523-890c4bf3d6c5 \
                --ignore-cluster-dir true \
                --cluster-name config4-$TIMESTAMP \
                --down --auto-approve --ignore-destroy-errors
              [ $rc != 0 ] && echo "ERROR: Unit Test suite exited with code:$rc"; exit $rc
  - name: periodic-kubernetes-containerd-conformance-test-ppc64le-1-34
    labels:
      preset-dind-enabled: "true"
      preset-ibmcloud-cred: "true"
    decorate: true
    decoration_config:
      gcs_configuration:
        bucket: ppc64le-kubernetes
        path_strategy: explicit
      gcs_credentials_secret: gcs-credentials
    cron: "0 4 * * *"
    extra_refs:
      - base_ref: main
        org: kubernetes-sigs
        repo: provider-ibmcloud-test-infra
        workdir: true
      - base_ref: release-1.34
        org: kubernetes
        repo: kubernetes
    spec:
      containers:
        - image: gcr.io/k8s-staging-test-infra/kubekins-e2e:v20241128-8df65c072f-1.34
          securityContext:
            privileged: true
          env:
            - name: "BOSKOS_HOST"
              value: "boskos.test-pods.svc.cluster.local"
          resources:
            requests:
              memory: "5Gi"
            limits:
              memory: "5Gi"
          command:
            - runner.sh
          args:
            - bash
            - -c
            - |
              set -o errexit
              set -o nounset
              set -o pipefail
              set -o xtrace

              export PATH=$GOPATH/bin:$PATH
              export GO111MODULE=on


              make install-deployer-tf
              TF_LATEST="v1.9.8"

              RESOURCE_TYPE="powervs-k8s-conformance"
              USER="periodic-k8s-containerd-conformance-job"

              trap cleanup EXIT

              cleanup(){
                # stop the boskos heartbeat
                [[ -z ${HEART_BEAT_PID:-} ]] || kill -9 "${HEART_BEAT_PID}" || true
              }

              curl -fsSL https://releases.hashicorp.com/terraform/${TF_LATEST:1}/terraform_${TF_LATEST:1}_linux_amd64.zip -o ./terraform.zip
              unzip -o ./terraform.zip  >/dev/null 2>&1
              rm -f ./terraform.zip
              TF="$PWD/terraform"
              export PATH=$PWD:$PATH

              apt-get update && apt-get install -y ansible

              # Details of IBM S3 storage
              S3_SERVER=s3.us.cloud-object-storage.appdomain.cloud
              BUCKET=k8s-infra-cos-bucket
              DIRECTORY=1.34

              # Build and push artifacts to IBM COS
              REPOROOT=../../kubernetes/kubernetes
              kubetest2 tf --build --repo-root $REPOROOT --stage cos://us/$BUCKET/$DIRECTORY --cos-cred-type cos_hmac
              K8S_BUILD_VERSION=`cat $REPOROOT/_output/release-stage/server/linux-ppc64le/kubernetes/version`

              TIMESTAMP=$(date +%s)
              jq --arg key0 'k8s-build-version' --arg value0 $K8S_BUILD_VERSION '. | .[$key0]=$value0' <<<'{}' > $ARTIFACTS/metadata.json


              set +o errexit

              heartbeat_account(){
                count=0
                url="http://${BOSKOS_HOST}/update?name=${BOSKOS_RESOURCE_NAME}&state=busy&owner=${USER}"
                while [ ${count} -lt 120 ]
                do
                  status_code=$(curl -s -o /dev/null -w '%{http_code}' -X POST ${url})
                  if [[ ${status_code} != 200 ]]; then
                    echo "Heart beat to resource '${BOSKOS_RESOURCE_NAME}' failed due to invalid response, status code: ${status_code}"
                    exit 1
                  fi
                  count=$(( $count + 1 ))
                  sleep 60
                done
              }

              if [ -n "${BOSKOS_HOST:-}" ]; then
                set +o xtrace
                url="http://${BOSKOS_HOST}/acquire?type=${RESOURCE_TYPE}&state=free&dest=busy&owner=${USER}"
                output=$(curl -X POST ${url})
                [ $? = 0 ] && status_code=200

                if [[ ${status_code} == 200 && ${output} =~ "failed" ]]; then
                  echo "Failed to acquire resource from Boskos of type ${RESOURCE_TYPE}"
                  exit 1
                elif [[ ${status_code} == 200 ]]; then
                  export BOSKOS_RESOURCE_NAME=$(echo ${output} | jq -r '.name')
                  export BOSKOS_REGION=$(echo ${output} | jq -r '.userdata["region"]')
                  export BOSKOS_RESOURCE_ID=$(echo ${output} | jq -r '.userdata["service-instance-id"]')
                  export BOSKOS_ZONE=$(echo ${output} | jq -r '.userdata["zone"]')
                  rm -rf output.json
                else
                  echo "Failed to acquire resource due to invalid response, status code : ${status_code}"
                  exit 1
                fi

                heartbeat_account >> "$ARTIFACTS/boskos.log" 2>&1 &
                HEART_BEAT_PID=$(echo $!)
              fi

              set -o xtrace
              kubetest2 tf --powervs-image-name CentOS-Stream-9 \
                --powervs-region ${BOSKOS_REGION} --powervs-zone ${BOSKOS_ZONE} \
                --powervs-service-id ${BOSKOS_RESOURCE_ID} \
                --powervs-ssh-key k8s-infra-sshkey \
                --ssh-private-key /etc/secret-volume/ssh-privatekey \
                --s3-server $S3_SERVER --bucket $BUCKET  --directory $DIRECTORY \
                --extra-vars=k8s_tar_bundles:kubernetes-server-linux-ppc64le.tar.gz \
                --build-version $K8S_BUILD_VERSION \
                --release-marker $K8S_BUILD_VERSION \
                --cluster-name config1-$TIMESTAMP \
                --workers-count 2 \
                --up --auto-approve --retry-on-tf-failure 3 \
                --break-kubetest-on-upfail true \
                --powervs-memory 32 \
                --test=ginkgo -- --parallel 10 --use-built-binaries true --focus-regex='\[Conformance\]' --skip-regex='\[Serial\]'; rc1=$?

              export KUBECONFIG="$(pwd)/config1-$TIMESTAMP/kubeconfig"
              export ARTIFACTS=$ARTIFACTS/serial_tests_artifacts
              #Run Serial Conformance tests
              kubetest2 tf --powervs-region ${BOSKOS_REGION} --powervs-zone ${BOSKOS_ZONE} \
                --powervs-service-id ${BOSKOS_RESOURCE_ID} \
                --ignore-cluster-dir true \
                --cluster-name config1-$TIMESTAMP \
                --down --auto-approve --ignore-destroy-errors \
                --test=ginkgo -- \
                --use-built-binaries true \
                --focus-regex='\[Serial\].*\[Conformance\]'; rc2=$?
              if [ $rc1 != 0 ]; then
                  echo "ERROR: Non Serial k8s Conformance tests exited with code: $rc1"
                  exit $rc1
              elif [ $rc2 != 0 ]; then
                  echo "ERROR: Serial k8s Conformance tests exited with code: $rc2"
                  exit $rc2
              fi

              if [ -n "${BOSKOS_HOST:-}" ]; then
                url="http://${BOSKOS_HOST}/release?name=${BOSKOS_RESOURCE_NAME}&dest=dirty&owner=${USER}"
                status_code=$(curl -w '%{http_code}' -X POST ${url})
                if [[ ${status_code} != 200 ]]; then
                  echo "Failed to release resource: ${BOSKOS_RESOURCE_NAME}"
                  exit 1
                fi
              fi
