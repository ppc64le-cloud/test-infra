prowjob_namespace: prow
pod_namespace: test-pods
log_level: debug

slack_reporter_configs:
  '*':
    job_types_to_report:
      - postsubmit
      - periodic
      - batch
    job_states_to_report:
      - failure
      - error
    channel: prow-job-notifications
    report_template: 'Job {{.Spec.Job}} of type {{.Spec.Type}} ended with state {{.Status.State}}. <!subteam^S01E9J0G3EU> <{{.Status.URL}}|View logs>'

in_repo_config:
  enabled:
    "*": true

deck:
  spyglass:
    gcs_browser_prefix: https://gcsweb.k8s.io/gcs/
    lenses:
      - lens:
          name: metadata
        required_files:
          - ^(?:started|finished)\.json$
        optional_files:
          - ^(?:podinfo|prowjob)\.json$
      - lens:
          config:
          name: buildlog
        required_files:
          - build-log.txt
      - lens:
          name: junit
        required_files:
          - .*/junit.*\.xml
      - lens:
          name: coverage
        required_files:
          - artifacts/filtered.cov
        optional_files:
          - artifacts/filtered.html
      - lens:
          name: podinfo
          config:
            runner_configs:
                "default":
                  pod_link_template: "https://us-south.containers.cloud.ibm.com/kubeproxy/clusters/c2mvmdid0fcfdmiub59g/service/#/pod/test-pods/{{ .Name }}?namespace=test-pods"
        required_files:
          - podinfo.json
        optional_files:
          - prowjob.json
      - lens:
          name: links
        required_files:
          - artifacts/.*\.link\.txt
  tide_update_period: 1s

plank:
  job_url_prefix_config:
    "*": https://prow.ppc64le-cloud.cis.ibm.net/view/
  pod_pending_timeout: 15m
  pod_unscheduled_timeout: 1m
  report_templates:
    '*': >-
      [Full PR test history](https://prow.ppc64le-cloud.cis.ibm.net/pr-history?org={{.Spec.Refs.Org}}&repo={{.Spec.Refs.Repo}}&pr={{with index .Spec.Refs.Pulls 0}}{{.Number}}{{end}}).
      [Your PR dashboard](https://prow.ppc64le-cloud.cis.ibm.net/pr?query=is:pr+state:open+author:{{with
      index .Spec.Refs.Pulls 0}}{{.Author}}{{end}}).
  default_decoration_config_entries:
  - config:
      timeout: 2h
      grace_period: 15s
      censor_secrets: true
      gcs_configuration:
        bucket: s3://ppc64le-prow-logs
        path_strategy: explicit
      s3_credentials_secret: s3-credentials
      blobless_fetch: true
      utility_images:
        clonerefs:  us-docker.pkg.dev/k8s-infra-prow/images/clonerefs:v20240802-66b115076
        entrypoint: us-docker.pkg.dev/k8s-infra-prow/images/entrypoint:v20240802-66b115076
        initupload: us-docker.pkg.dev/k8s-infra-prow/images/initupload:v20240802-66b115076
        sidecar: us-docker.pkg.dev/k8s-infra-prow/images/sidecar:v20240802-66b115076
      ssh_key_secrets:
        - bot-ssh-secret

tide:
  sync_period: 2m
  queries:
    - orgs:
        - ppc64le-cloud
        - ocp-power-automation
        - PDeXchange
      labels:
        - lgtm
        - approved
      missingLabels:
        - do-not-merge/hold
        - do-not-merge/work-in-progress
        - do-not-merge/invalid-owners-file
        - do-not-merge/non-mergeable
  squash_label: tide/merge-method-squash

decorate_all_jobs: true

presets:
# docker-in-docker preset
- labels:
    preset-dind-enabled: "true"
  env:
  - name: DOCKER_IN_DOCKER_ENABLED
    value: "true"
  volumes:
  # kubekins-e2e legacy path
  - name: docker-graph
    emptyDir: {}
  # krte (normal) path
  - name: docker-root
    emptyDir: {}
  volumeMounts:
  - name: docker-graph
    mountPath: /docker-graph
  - name: docker-root
    mountPath: /var/lib/docker
# volume mounts for kind
- labels:
    preset-kind-volume-mounts: "true"
  volumeMounts:
    - mountPath: /lib/modules
      name: modules
      readOnly: true
    - mountPath: /sys/fs/cgroup
      name: cgroup
  volumes:
    - name: modules
      hostPath:
        path: /lib/modules
        type: Directory
    - name: cgroup
      hostPath:
        path: /sys/fs/cgroup
        type: Directory
# containerd powervs preset
- labels:
    preset-containerd-powervs: "true"
  env:
    - name: IBMCLOUD_API_KEY
      valueFrom:
        secretKeyRef:
          name: containerd-apikey
          key: apikey
  volumeMounts:
    - name: atos-ssh-volume
      readOnly: true
      mountPath: "/etc/ssh-volume"
  volumes:
    - name: atos-ssh-volume
      secret:
        secretName: atos-powervs-ssh-key
        defaultMode: 256
# ocp github deploy key preset
- labels:
    preset-ocp-ghdeploykey: "true"
  volumeMounts:
    - mountPath: /etc/ssh-key
      name: github-key
  volumes:
    - name: github-key
      secret:
        secretName: ocp-gh-deploykey
# build docker preset
- labels:
    preset-build-docker: "true"
  env:
    - name: S3_SECRET_AUTH
      valueFrom:
        secretKeyRef:
          name: docker-s3-credentials
          key: password
  volumes:
    - name: docker-root
      emptyDir: {}
  volumeMounts:
    - name: docker-root
      mountPath: /var/lib/docker
# image-builder preset
- labels:
    preset-image-builder: "true"
  env:
    - name: DOCKER_CONFIG
      valueFrom:
        secretKeyRef:
          name: quay-powercloud-regcred
          key: .dockerconfigjson
  volumes:
    - name: kubeconfig
      secret:
        secretName: image-builder-ppc-kubeconfig
  volumeMounts:
    - name: kubeconfig
      mountPath: /etc/kubeconfig
# ssh bot preset
- labels:
    preset-ssh-bot: "true"
  volumeMounts:
    - mountPath: /etc/secret-volume
      name: powercloud-bot-key
      readOnly: true
  env:
    - name: TF_VAR_powervs_api_key
      valueFrom:
        secretKeyRef:
          name: ibm-cloud-credentials
          key: TF_VAR_powervs_api_key
  volumes:
    - name: powercloud-bot-key
      secret:
        defaultMode: 256
        secretName: bot-ssh-secret
# Building Golang binaries
- labels:
    preset-golang-build: "true"
  env:
    - name: GOPPC64
      value: power9
# knative powervs preset
- labels:
    preset-knative-powervs: "true"
  env:
    - name: TF_VAR_powervs_api_key
      valueFrom:
        secretKeyRef:
          name: knative-apikey
          key: apikey
    - name: KO_FLAGS
      value: --platform=linux/ppc64le
    - name: PLATFORM
      value: linux/ppc64le
    - name: INGRESS_CLASS
      value: contour.ingress.networking.knative.dev
    - name: KO_DOCKER_REPO
      value: icr.io/upstream-k8s-registry/knative
    - name: DOCKER_CONFIG
      value: /root/.docker

  volumeMounts:
    - name: ssh-key
      mountPath: /root/.ssh/
      readOnly: true
    - name: config-json
      mountPath: /root/.docker/
      readOnly: true

  volumes:
    - name: ssh-key
      secret:
        secretName: ssh-key-secret
        defaultMode: 384 
    - name: config-json
      secret:
        secretName: config-json-secret
        defaultMode: 420
# credentials for pushing to IBM COS
- labels:
    preset-s3-stage-cred: "true"
  volumeMounts:
    - mountPath: /root/.aws
      name: s3-stage-credentials
      readOnly: true
  volumes:
    - name: s3-stage-credentials
      secret:
        defaultMode: 256
        secretName: s3-stage-credentials
